<div id="random-string-output" x-data="stringOutput" :class="{ hidden: rollValues.length === 0 || type !== 'string' }">
    <h2 id="string-output-header" class="text-xl font-bold mb-2">Random String</h2>

    <div class="bg-gray-100 dark:bg-gray-900 p-4 rounded-lg shadow-inner relative mb-2 flex gap-2 items-center">
        <p id="generated-string" class="flex-1 break-all text-blue-600 dark:text-blue-400 font-mono" x-text="generatedString"></p>
        <button
            class="text-black bg-gray-300 hover:bg-gray-400 text-xs py-1 px-2 ml-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
            @click="copyToClipboard('generated-string')"
        >
        Copy
        </button>
    </div>
</div>

<script>
import Alpine from "alpinejs";

document.addEventListener('alpine:init', () => {
  Alpine.data('stringOutput', () => ({
    generatedString: '',

    init() {
      Alpine.effect(() => {
        if (this.type !== 'string') return;

        this.generatedString = convertDiceRollsToRandomString(this.rollValues, this.byteLength * 8, this.stringOutputFormat);

      });
    },


    copyToClipboard(elementId) {
      const text = document.getElementById(elementId).innerText;
      navigator.clipboard.writeText(text).then(() => {
        alert('Copied to clipboard!');
      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    }
  }));
});

function convertDiceRollsToRandomString(diceRolls, targetEntropy, outputFormat = 'base64') {
  const charSet =
    outputFormat === 'base64'
    ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'; // Base64 character set
  const hexCharSet = '0123456789abcdef'; // Hexadecimal character set

  let combinedRolls = [];

  // Flatten the dice rolls array (in case it's a 2D array)
  diceRolls.forEach(roll => {
    combinedRolls = combinedRolls.concat(roll);
  });

  let result = '';

  // Adjust target entropy for base64 if needed (multiple of 6 bits)
  if (outputFormat === 'base64' || outputFormat === 'urlSafeBase64') {
    targetEntropy = Math.ceil(targetEntropy / 6) * 6; // Make it a multiple of 6
  }

  // Directly use dice values to index into charSet
  let groupSize = Math.ceil(Math.log2(outputFormat === 'hex' ? 16 : 64) / Math.log2(6)); // Group size based on the charSet and dice range

  let index = 0;
  const charSetLength = charSet.length;
  while (result.length < Math.ceil(targetEntropy / (outputFormat === 'hex' ? 4 : 6))) {
    let value = 0;
    for (let i = 0; i < groupSize; i++) {
      if (index >= combinedRolls.length) index = 0; // Wrap around dice rolls if needed
      value = value * 6 + (combinedRolls[index++] - 1); // Create index by combining dice values
    }

    if (outputFormat === 'base64' || outputFormat === 'urlSafeBase64') {
      result += charSet[value % charSetLength]; // Map to Base64 character set
    } else if (outputFormat === 'hex') {
      result += hexCharSet[value % 16]; // Map to Hexadecimal character set
    }
  }

  return result;
}
</script>
