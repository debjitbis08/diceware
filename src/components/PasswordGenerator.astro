<div
    x-data="passwordGenerator"
    :class="{ hidden: type !== 'password' }"
>
    <div>
        <div class="mb-6">
            <label for="password-length" class="block text-sm font-medium mb-2">Password Length</label>
            <div class="flex items-center gap-4">
                <input
                    type="range"
                    min="8"
                    max="100"
                    x-model.number="passwordLength"
                    @change="handlePasswordLengthChange($el)"
                />
                <input
                    type="number"
                    min="8"
                    max="100"
                    x-model.number="passwordLength"
                    @change="handlePasswordLengthChange($el)"
                    class="bg-transparent border border-gray-400 dark:border-gray-600 p-2"
                />
            </div>
        </div>
        <div class="mb-6">
            <label for="number-of-dice" class="block text-sm font-medium mb-2">Number of dice per roll</label>
            <select
                id="number-of-dice"
                class="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-200 p-2 w-full rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                @change="handleNumberOfDiceChange($el)"
                x-model.number="dicePerRoll"
            >
                <template x-for="option in diceOptions">
                    <option :value="option.value" x-text="option.text" :selected="option.value === '5'"></option>
                </template>
            </select>
        </div>
        <div class="mb-6 flex items-center gap-4">
            <div class="flex items-center gap-2">
                <input type="checkbox" id="use-numbers" x-model="useNumbers">
                <label for="use-numbers" class="block text-sm font-medium">Use Numbers</label>
            </div>
            <div class="flex items-center gap-2">
                <input type="checkbox" id="use-symbols" x-model="useSymbols">
                <label for="use-symbols" class="block text-sm font-medium">Use Symbols</label>
            </div>
        </div>
    </div>
    <div id="password-output" :class="{ hidden: rollValues.length === 0 || type !== 'password' }">
        <h2 id="password-output-header" class="text-xl font-bold mb-2">Generated Password</h2>

        <div class="bg-gray-100 dark:bg-gray-900 p-4 rounded-lg shadow-inner relative mb-2 flex gap-2 items-center">
            <p id="generated-password" class="flex-1 break-all text-blue-600 dark:text-blue-400 font-mono" x-text="generatedPassword"></p>
            <button
                class="text-black bg-gray-300 hover:bg-gray-400 text-xs py-1 px-2 ml-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                @click="copyToClipboard('generated-password')"
            >
            Copy
            </button>
        </div>
    </div>
</div>

<style>
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
    /* display: none; <- Crashes Chrome on hover */
    -webkit-appearance: none;
    margin: 0; /* <-- Apparently some margin are still there even though it's hidden */
}

input[type=number] {
    -moz-appearance:textfield; /* Firefox */
}
</style>

<script>
import Alpine from 'alpinejs';

const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
const numbers = '0123456789';
const symbols = '!@#$%^&*()_+[]{}|;:,.<>?';

document.addEventListener('alpine:init', () => {
  Alpine.data('passwordGenerator', () => {
    return {
      diceOptions: [],
      passwordLength: 12,
      useNumbers: true,
      useSymbols: false,
      generatedPassword: '',


      init() {
        this.$watch('type', (type) => {
          if (type !== 'password') return;

          const diceOptions = getDiceOptions(
            this.passwordLength,
            getCharSet(this.useNumbers, this.useSymbols)
          ).sort((a, b) => a.requiredRolls - b.requiredRolls);

          this.diceOptions = diceOptions.map(({ diceCount, requiredRolls }) => ({
            value: diceCount,
            text: `${diceCount} Dice (${requiredRolls} Rolls)`,
          }));

          this.dicePerRoll = Number(diceOptions[0].diceCount);
          this.rolls = diceOptions[0].requiredRolls;
          this.rollValues = [];
        });

        Alpine.effect(() => {
          if (this.type !== 'password') return;

          this.generatedPassword = this.convertDiceRollsToRandomPassword(
            this.rollValues,
            this.passwordLength,
          );
        });
      },

      handlePasswordLengthChange(el) {
        this.rollValues = [];

        const value = Number(el.value);

        const diceOptions = getDiceOptions(
          value,
          getCharSet(this.useNumbers, this.useSymbols)
        ).sort((a, b) => a.requiredRolls - b.requiredRolls);

        this.diceOptions = diceOptions.map(({ diceCount, requiredRolls }) => ({
          value: diceCount,
          text: `${diceCount} Dice (${requiredRolls} Rolls)`,
        }));
        this.dicePerRoll = Number(diceOptions[0].diceCount);
        this.rolls = diceOptions[0].requiredRolls;
      },

      handleNumberOfDiceChange(el) {
        const diceCount = Number(el.value);
        const rolls = getRequiredRolls(
          diceCount,
          this.passwordLength,
          getCharSet(this.useNumbers, this.useSymbols)
        );
        this.dicePerRoll = diceCount;
        this.rolls = rolls;
      },

      convertDiceRollsToRandomPassword(diceRolls, passwordLength) {
        const charSet = getCharSet(this.useNumbers, this.useSymbols);

        // Map to convert to valid base-6 numeral
        const flatDiceRolls = diceRolls.flat().map((value) => value - 1);

        // Group dice values to form larger numbers to index into the charSet
        const diceGroupSize = Math.ceil(logBase6(charSet.length));

        const groupedRolls = [];
        for (let i = 0; i < flatDiceRolls.length; i += diceGroupSize) {
          groupedRolls.push(flatDiceRolls.slice(i, i + diceGroupSize));
        }

        const indices = groupedRolls.slice(0, passwordLength).map((group) => {
          return group.reduce((acc, value) => acc * 6 + value, 0);
        });

        const password = indices.map((index) => charSet[index % charSet.length]).join('');

        return password;
      },


      copyToClipboard(elementId) {
        const text = document.getElementById(elementId).innerText;
        navigator.clipboard.writeText(text).then(() => {
          alert('Copied to clipboard!');
        }).catch(err => {
          console.error('Failed to copy: ', err);
        });
      }
    };
  });
});

function getDiceOptions(passwordLength, charSet) {
  return [1, 2, 3, 4, 5].map((diceCount) => {
    const requiredRolls = getRequiredRolls(
      diceCount,
      passwordLength,
      charSet
    );

    return { diceCount, requiredRolls };
  });
}

function getRequiredRolls(diceCount, passwordLength, charSet) {
  // How many dice rolls is needed to form an index into charSet
  const dieNumberGroupSize = Math.ceil(logBase6(charSet.length));
  const totalRollsRequired = dieNumberGroupSize * passwordLength;
  const requiredRolls = Math.ceil(totalRollsRequired / diceCount);

  return requiredRolls;
}

function getCharSet(useNumbers = true, useSymbols = false) {
  let charSet = letters;
  if (useNumbers) charSet += numbers;
  if (useSymbols) charSet += symbols;

  return charSet;
}

function logBase6(n) {
  return Math.log(n) / Math.log(6);
}
</script>
