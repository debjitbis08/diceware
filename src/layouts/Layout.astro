---
import { pwaInfo } from 'virtual:pwa-info';
import { pwaAssetsHead } from 'virtual:pwa-assets/head';
import ReloadPrompt from '../components/ReloadPrompt.astro';
import './global.css';
import Header from '../components/Header.astro';
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{title}</title>
		<meta name="description" content="Dice Generated Secure Strings and Passphrases" />
		<meta name="generator" content={Astro.generator} />
        { pwaAssetsHead.themeColor && <meta name="theme-color" content={pwaAssetsHead.themeColor.content} /> }
        { pwaAssetsHead.links.map(link => (
            <link {...link} />
        )) }
        <script src="/src/pwa.js"></script>
        { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
        <script is:inline>
          (function () {
              // On page load or when changing themes, best to add inline in `head` to avoid FOUC
              const theme = localStorage.theme;
              if (theme === 'system') {
                  // Detect system preference (dark or light)
                  const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
                  document.documentElement.classList.toggle('dark', isDarkMode);
              } else {
                  // Apply the manually selected theme ('light' or 'dark')
                  document.documentElement.classList.toggle('dark', theme === 'dark');
              }
          }());
        </script>
	</head>
    <body class="bg-white dark:bg-gray-900 text-black dark:text-white min-h-screen">
        <Header />
		<slot />
		<ReloadPrompt />
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #13151a;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>

<script>
import Alpine from 'alpinejs';

document.addEventListener('alpine:init', () => {
  Alpine.store('theme', {
      value: 'system',

      init() {
          this.value = localStorage.getItem('theme') || 'system';
          // On page load, apply the appropriate theme
          this.applyTheme();

          // Watch for changes in system preference if the theme is 'system'
          this.watchSystemPreference();
      },

      switch(theme) {
          this.value = theme;  // Update theme value
          this.applyTheme();   // Apply the selected theme
          localStorage.setItem('theme', theme);
      },

      applyTheme() {
          if (this.value === 'system') {
              // Detect system preference (dark or light)
              const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
              document.documentElement.classList.toggle('dark', isDarkMode);
          } else {
              // Apply the manually selected theme ('light' or 'dark')
              document.documentElement.classList.toggle('dark', this.value === 'dark');
          }
      },

      watchSystemPreference() {
          // Watch for system preference changes (e.g., user switches from dark to light mode in OS)
          window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
              if (this.value === 'system') {
                  document.documentElement.classList.toggle('dark', e.matches);
              }
          });
      }
  });
});
</script>
